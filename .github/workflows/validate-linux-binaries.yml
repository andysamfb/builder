name: Validate linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all

jobs:
  generate-linux-conda-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: conda
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-wheel-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-libtorch-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: libtorch
      os: linux
      channel: nightly

  validate-linux-binaries-conda:
    needs: generate-linux-conda-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-conda-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary conda
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
          desired_cuda: ${{ matrix.desired_cuda }}
          dev_toolset: ''
          package_type: conda
          target_os: linux
  validate-linux-binaries-wheels:
    needs: generate-linux-wheel-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-wheel-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary wheel
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
          desired_cuda: ${{ matrix.desired_cuda }}
          dev_toolset: ''
          package_type: wheel
          target_os: linux

  validate-linux-libtorch-binaries:
    needs: generate-linux-libtorch-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-libtorch-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
    - name: Checkout PyTorch builder
      uses: actions/checkout@v2
    - name: Check nvidia smi
      if: ${{ matrix.gpu_arch_type == 'cuda' }}
      shell: bash
      run: |
        nvidia-smi
    - name: Install Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ matrix.python_version }}
        auto-update-conda: true
        miniconda-version: "latest"
        activate-environment: testenv
    - name: Install PyTorch and run tests
      shell: bash
      env:
        GPU_ARCH_VER: ${{ matrix.gpu_arch_ver }}
        GPU_ARCH_TYPE: ${{ matrix.gpu_arch_type }}
        INSTALLATION: ${{ matrix.installation }}
        ENV_NAME: conda-env-${{ github.run_id }}
        DESIRED_PYTHON: ${{ matrix.python_version }}
        DESIRED_CUDA: ${{ matrix.desired_cuda }}
        DESIRED_DEVTOOLSET: ${{ matrix.dev_toolset }}
        PACKAGE_TYPE: ${{ matrix.package_type }}
      run: |
        set -ex
        conda create -yp ${ENV_NAME} python=${DESIRED_PYTHON} numpy
        conda run -p ${ENV_NAME} sudo -E apt-get install unzip -y
        conda run -p ${ENV_NAME} curl ${INSTALLATION} -o libtorch.zip
        conda run -p ${ENV_NAME} unzip libtorch.zip
        conda run -p ${ENV_NAME} --cwd libtorch python3  ./../test/smoke_test/smoke_test.py
        export LD_LIBRARY_PATH="$(dirname $(which python))/lib"
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib
        conda run -p ${ENV_NAME} --cwd libtorch env LD_LIBRARY_PATH=$LD_LIBRARY_PATH bash ./../check_binary.sh
        conda env remove -p ${ENV_NAME}
